// Code generated by MockGen. DO NOT EDIT.
// Source: internal/business/blogbus/blogbus.go

// Package mockblogbus is a generated GoMock package.
package mockblogbus

import (
	context "context"
	reflect "reflect"

	blogbus "github.com/anazcodes/blogapp/internal/business/blogbus"
	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddBlogPost mocks base method.
func (m *MockRepo) AddBlogPost(ctx context.Context, abp blogbus.AddBlogPost) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlogPost", ctx, abp)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlogPost indicates an expected call of AddBlogPost.
func (mr *MockRepoMockRecorder) AddBlogPost(ctx, abp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlogPost", reflect.TypeOf((*MockRepo)(nil).AddBlogPost), ctx, abp)
}

// BlogPost mocks base method.
func (m *MockRepo) BlogPost(ctx context.Context, id uint64) (blogbus.BlogPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogPost", ctx, id)
	ret0, _ := ret[0].(blogbus.BlogPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlogPost indicates an expected call of BlogPost.
func (mr *MockRepoMockRecorder) BlogPost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogPost", reflect.TypeOf((*MockRepo)(nil).BlogPost), ctx, id)
}

// BlogPosts mocks base method.
func (m *MockRepo) BlogPosts(ctx context.Context) []blogbus.BlogPost {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogPosts", ctx)
	ret0, _ := ret[0].([]blogbus.BlogPost)
	return ret0
}

// BlogPosts indicates an expected call of BlogPosts.
func (mr *MockRepoMockRecorder) BlogPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogPosts", reflect.TypeOf((*MockRepo)(nil).BlogPosts), ctx)
}

// DeleteBlogPost mocks base method.
func (m *MockRepo) DeleteBlogPost(ctx context.Context, id uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlogPost", ctx, id)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBlogPost indicates an expected call of DeleteBlogPost.
func (mr *MockRepoMockRecorder) DeleteBlogPost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlogPost", reflect.TypeOf((*MockRepo)(nil).DeleteBlogPost), ctx, id)
}

// UpdateBlogPost mocks base method.
func (m *MockRepo) UpdateBlogPost(ctx context.Context, id uint64, ubp blogbus.UpdateBlogPost) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlogPost", ctx, id, ubp)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlogPost indicates an expected call of UpdateBlogPost.
func (mr *MockRepoMockRecorder) UpdateBlogPost(ctx, id, ubp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlogPost", reflect.TypeOf((*MockRepo)(nil).UpdateBlogPost), ctx, id, ubp)
}

// MockBusiness is a mock of Business interface.
type MockBusiness struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessMockRecorder
}

// MockBusinessMockRecorder is the mock recorder for MockBusiness.
type MockBusinessMockRecorder struct {
	mock *MockBusiness
}

// NewMockBusiness creates a new mock instance.
func NewMockBusiness(ctrl *gomock.Controller) *MockBusiness {
	mock := &MockBusiness{ctrl: ctrl}
	mock.recorder = &MockBusinessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusiness) EXPECT() *MockBusinessMockRecorder {
	return m.recorder
}

// AddBlogPost mocks base method.
func (m *MockBusiness) AddBlogPost(ctx context.Context, abp blogbus.AddBlogPost) (blogbus.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlogPost", ctx, abp)
	ret0, _ := ret[0].(blogbus.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlogPost indicates an expected call of AddBlogPost.
func (mr *MockBusinessMockRecorder) AddBlogPost(ctx, abp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlogPost", reflect.TypeOf((*MockBusiness)(nil).AddBlogPost), ctx, abp)
}

// BlogPost mocks base method.
func (m *MockBusiness) BlogPost(ctx context.Context, id uint64) (blogbus.BlogPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogPost", ctx, id)
	ret0, _ := ret[0].(blogbus.BlogPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlogPost indicates an expected call of BlogPost.
func (mr *MockBusinessMockRecorder) BlogPost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogPost", reflect.TypeOf((*MockBusiness)(nil).BlogPost), ctx, id)
}

// BlogPosts mocks base method.
func (m *MockBusiness) BlogPosts(ctx context.Context) []blogbus.BlogPost {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlogPosts", ctx)
	ret0, _ := ret[0].([]blogbus.BlogPost)
	return ret0
}

// BlogPosts indicates an expected call of BlogPosts.
func (mr *MockBusinessMockRecorder) BlogPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlogPosts", reflect.TypeOf((*MockBusiness)(nil).BlogPosts), ctx)
}

// DeleteBlogPost mocks base method.
func (m *MockBusiness) DeleteBlogPost(ctx context.Context, id uint64) (blogbus.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlogPost", ctx, id)
	ret0, _ := ret[0].(blogbus.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBlogPost indicates an expected call of DeleteBlogPost.
func (mr *MockBusinessMockRecorder) DeleteBlogPost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlogPost", reflect.TypeOf((*MockBusiness)(nil).DeleteBlogPost), ctx, id)
}

// UpdateBlogPost mocks base method.
func (m *MockBusiness) UpdateBlogPost(ctx context.Context, id uint64, ubp blogbus.UpdateBlogPost) (blogbus.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlogPost", ctx, id, ubp)
	ret0, _ := ret[0].(blogbus.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlogPost indicates an expected call of UpdateBlogPost.
func (mr *MockBusinessMockRecorder) UpdateBlogPost(ctx, id, ubp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlogPost", reflect.TypeOf((*MockBusiness)(nil).UpdateBlogPost), ctx, id, ubp)
}
